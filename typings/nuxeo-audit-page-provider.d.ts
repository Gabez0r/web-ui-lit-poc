/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   nuxeo-audit-page-provider.html
 */

// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

/// <reference path="nuxeo-element.d.ts" />
/// <reference path="nuxeo-operation.d.ts" />
/// <reference path="nuxeo-resource.d.ts" />

declare namespace Nuxeo {
  /**
   * `nuxeo-audit-page-provider` performs an audit query with the given parameters against audit logs.
   * If the property docId is set, the provider DOCUMENT_HISTORY_PROVIDER is used with docId as queryParameter.
   * If the property docId is not set, the EVENTS_VIEW provider is used instead.
   *
   *     <nuxeo-audit-page-provider
   *         current-page="{{entries}}" params="{...}" page-size="40'">
   *     </nuxeo-audit-page-provider>
   *
   *     <nuxeo-audit-page-provider
   *         current-page="{{entries}}" docId="..." page-size="40'">
   *     </nuxeo-audit-page-provider>
   */
  class AuditPageProvider extends Nuxeo.Element {
    readonly _sortKeys: any;
    readonly _sortValues: any;
    readonly _isForDoc: any;

    /**
     * The id of a nuxeo-connection to use.
     */
    connectionId: string | null | undefined;

    /**
     * If true, automatically execute the operation when either `docId` or `params` change.
     */
    auto: boolean | null | undefined;

    /**
     * The delay in milliseconds to debounce the auto fetch call when `docId`, `params`, etc. changes.
     */
    autoDelay: number | null | undefined;

    /**
     * The query parameters object.
     */
    params: object | null | undefined;

    /**
     * The document id to retrieve the history from.
     * When set, the provider DOCUMENT_HISTORY_PROVIDER is used.
     */
    docId: string | null | undefined;

    /**
     * The number of results per page.
     */
    pageSize: number | null | undefined;

    /**
     * The current page.
     */
    page: number | null | undefined;

    /**
     * The current page entries.
     */
    currentPage: any[] | null | undefined;

    /**
     * Map of properties and direction 'asc' / 'desc'
     */
    sort: object | null | undefined;

    /**
     * Total number of pages.
     */
    numberOfPages: number | null | undefined;

    /**
     * Total number of results.
     */
    resultsCount: number | null | undefined;

    /**
     * Returns true if a next page is available.
     */
    isNextPageAvailable: boolean | null | undefined;

    /**
     * Current page's size
     */
    currentPageSize: number | null | undefined;

    /**
     * The `content enricher` of the resource.
     * Can be an object with entity type as keys or list or string (which defaults to `document` entity type).
     */
    enrichers: object | null | undefined;

    /**
     * List of comma separated values of the document schemas to be returned.
     * All document schemas are returned by default.
     */
    schemas: string | null | undefined;

    /**
     * The headers of the request.
     * 'Accept': 'text/plain,application/json' is already set by default.
     */
    headers: object | null | undefined;

    /**
     * True while requests are in flight.
     */
    readonly loading: boolean | null | undefined;

    /**
     * Stringifies the elements of a given object
     */
    _stringifyJSONObject(input: any): any;

    /**
     * Fetch the currentPage.
     */
    fetch(): any;
    _fetchOp(): any;
    _fetchRes(): any;
    _fetch(exec: any, params: any): any;
    _resetAndAutoFetch(): void;
    _autoFetch(): void;
  }
}

interface HTMLElementTagNameMap {
  'nuxeo-audit-page-provider': Nuxeo.AuditPageProvider;
}
